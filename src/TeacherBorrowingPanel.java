
import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;

public class TeacherBorrowingPanel extends javax.swing.JPanel {

    private final JPanel panelContent;
    private final BookDAO bookDAO = new BookDAO();
    private Map<String, Integer> booksBorrowedByTeacher = new HashMap<>();
    private String url = "jdbc:mysql://localhost:3306/librarydb";
    private String user = "root";
    private String password = "";
    
    public TeacherBorrowingPanel(JPanel panelContent) {
        this.panelContent = panelContent;
        initComponents();
        
        
        
        addPlaceholderStyle(teacher_name, "Last Name, First Name, M.I");
        addPlaceholderStyle(employer_id, "e.g. a12345678");       
        addPlaceholderStyle(teacher_contact, "09123456789");
        
        
        
        book_id.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                fetchBookDetails();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                fetchBookDetails();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                fetchBookDetails();
            }
        });
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        teacher_contact = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        book_category = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        book_id = new javax.swing.JTextField();
        book_isbn = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        book_title = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        date_borrowed = new com.toedter.calendar.JDateChooser();
        employer_id = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        department_combo = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        print_due = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        teacher_name = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        confirm_btn = new javax.swing.JLabel();
        cancel_btn = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1290, 463));
        setPreferredSize(new java.awt.Dimension(1290, 463));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(70, 134, 242));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/back.png"))); // NOI18N
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/teacher_icon_small.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Borrowing Details");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(384, 384, 384)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(425, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 60));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMinimumSize(new java.awt.Dimension(1250, 347));
        jPanel2.setPreferredSize(new java.awt.Dimension(1250, 347));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Department");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setText("Contact no.");

        teacher_contact.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("Book Category");

        book_category.setFont(new java.awt.Font("Arial", 0, 17)); // NOI18N
        book_category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Category", "Fiction", "Non-Fiction", "Academic" }));
        book_category.setToolTipText("");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("Book ID");

        book_id.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        book_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                book_idActionPerformed(evt);
            }
        });

        book_isbn.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setText("ISBN");

        book_title.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel10.setText("Book Title");

        jLabel11.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel11.setText("Date Borrowed");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel12.setText("Due Date");

        employer_id.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel13.setText("Employer's ID");

        department_combo.setFont(new java.awt.Font("Arial", 0, 17)); // NOI18N
        department_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CCIS", "CHK", "CTHM", "ION" }));
        department_combo.setToolTipText("");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        print_due.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        print_due.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                print_dueInputMethodTextChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(print_due, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(print_due, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Name");

        teacher_name.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        teacher_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacher_nameActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(employer_id, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(department_combo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(teacher_contact, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(teacher_name, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(131, 213, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(book_title, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(book_id, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(123, 123, 123)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(date_borrowed, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(book_isbn, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(book_category, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(134, 134, 134))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(date_borrowed, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(employer_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(8, 8, 8)
                                .addComponent(teacher_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(department_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(teacher_contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(book_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(book_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(book_isbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(book_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 1250, 340));

        confirm_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/confirm-btnn.png"))); // NOI18N
        confirm_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirm_btnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirm_btnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirm_btnMouseExited(evt);
            }
        });
        add(confirm_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 430, -1, -1));

        cancel_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/cancel-btnn.png"))); // NOI18N
        cancel_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancel_btnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancel_btnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancel_btnMouseExited(evt);
            }
        });
        add(cancel_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 430, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        // TODO add your handling code here:
        panelContent.removeAll();

        // Create a new instance of WhosBorrowingPanel and pass panel_content
        WhosBorrowingPanel whosBorrowingPanel = new WhosBorrowingPanel(panelContent);

        // Add WhosBorrowingPanel to panelContent
        panelContent.add(whosBorrowingPanel);

        // Make panelContent JPanel visible
        panelContent.setVisible(true);

        // Repaint and revalidate panelContent JPanel
        panelContent.revalidate();
        panelContent.repaint();

    }//GEN-LAST:event_jLabel15MouseClicked

    private void teacher_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacher_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teacher_nameActionPerformed

    private void book_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_book_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_book_idActionPerformed

    private void print_dueInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_print_dueInputMethodTextChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_print_dueInputMethodTextChanged

    private void confirm_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirm_btnMouseClicked
        // TODO add your handling code here:
        submitBorrowingDetails();
    }//GEN-LAST:event_confirm_btnMouseClicked

    private void confirm_btnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirm_btnMouseEntered
        // TODO add your handling code here:
        confirm_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_confirm_btnMouseEntered

    private void confirm_btnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirm_btnMouseExited
        // TODO add your handling code here:
        confirm_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_confirm_btnMouseExited

    private void cancel_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_btnMouseClicked
        // TODO add your handling code here:
        clearFields();
    }//GEN-LAST:event_cancel_btnMouseClicked

    private void cancel_btnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_btnMouseEntered
        // TODO add your handling code here:
        cancel_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_cancel_btnMouseEntered

    private void cancel_btnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_btnMouseExited
        // TODO add your handling code here:
        cancel_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_cancel_btnMouseExited

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        fetchTeacherDetails();
    }//GEN-LAST:event_jButton1ActionPerformed


    
    //methods
    
    
    
    // Method for button teacher id fetching
    private void fetchTeacherDetails() {
        String employerIDText = employer_id.getText();
        if (employerIDText.isEmpty()) {
            return; // If the teacher ID field is empty, do nothing
        }

        String employerId = employerIDText;

        try {
            BorrowerDetails teacherDetails = getTeacherBorrowingDetails(employerId);
            if (teacherDetails != null) {
                populateFields(teacherDetails);
            } else {
                JOptionPane.showMessageDialog(this, "No borrowing record found for the given Employer ID.", "No Record Found", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error fetching details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateFields(BorrowerDetails details) {
        teacher_name.setText(details.getName());
        department_combo.setSelectedItem(details.getYearOrDepartment());
        teacher_contact.setText(details.getContactNo());
    }

    public BorrowerDetails getTeacherBorrowingDetails(String employerId) throws SQLException {
        String url = "jdbc:mysql://localhost:3306/librarydb";
        String user = "root";
        String password = "";
        String sql = "SELECT * FROM teacher_list WHERE employers_id = ?";

        try (Connection connection = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, employerId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                BorrowerDetails details = new BorrowerDetails();
                details.setName(rs.getString("teachers_name"));
                details.setYearOrDepartment(rs.getString("department"));
                details.setContactNo(rs.getString("contact_no"));
                return details;
            }
        }
        return null;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    private void clearFields() {
            // Clear text fields
            clearTextField(teacher_name, "Last Name, First Name, M.I");
            clearTextField(employer_id, "e.g. a12345678");           
            clearTextField(teacher_contact, "09123456789");
            
            book_id.setText("");
            book_title.setText("");
            book_isbn.setText("");
            // Reset combo box
            book_category.setSelectedIndex(0);

            // Clear date chooser
            date_borrowed.setDate(null);

            // Clear due date label
            print_due.setText("");
            
            // Inside clearFields method
            if (date_borrowed != null) {
                date_borrowed.setDate(null);
            }

        }
    private void clearTextField(JTextField textField, String placeholder) {
            textField.setText("");
            addPlaceholderStyle(textField, placeholder);
        }
    
    //palceholdermethod
    public static void addPlaceholderStyle(JTextField textField, String placeholder) {
        textField.setText(placeholder);
        textField.setForeground(Color.GRAY);

        textField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (textField.getText().equals(placeholder)) {
                    textField.setText("");
                    textField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (textField.getText().isEmpty()) {
                    textField.setText(placeholder);
                    textField.setForeground(Color.GRAY);
                }
            }
        });
    }
    
    
    
    //method for fetching book 
            private void fetchBookDetails() {
                String bookIdText = book_id.getText();
                    if (StringUtils.isBlank(bookIdText)) {
                        // Handle the case where bookIdText is empty
                        // For example, you might want to set a default value or show an error message
                    } else {
                        try {
                            int bookId = Integer.parseInt(bookIdText);
                            // Continue processing with the bookId
                            String url = "jdbc:mysql://localhost:3306/librarydb";
                            String user = "root";
                            String password = "";

                            String sql = "SELECT title, isbn, category FROM books WHERE id = ?";

                            try (Connection connection = DriverManager.getConnection(url, user, password);
                                 PreparedStatement pstmt = connection.prepareStatement(sql)) {

                                pstmt.setInt(1, bookId);

                                try (ResultSet rs = pstmt.executeQuery()) {
                                    if (rs.next()) {
                                        book_title.setText(rs.getString("title"));
                                        book_isbn.setText(rs.getString("isbn"));
                                        book_category.setSelectedItem(rs.getString("category"));
                                    } else {
                                        // Clear fields if book ID is not found
                                        book_title.setText("");
                                        book_isbn.setText("");
                                        book_category.setSelectedIndex(-1);
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                                // Handle SQLException
                            }
                        } catch (NumberFormatException ex) {
                            // Handle the case where bookIdText is not a valid integer
                            // For example, show an error message or log the error
                        }
                    }
            }
        
        
        //method for sumbitting 
        private void submitBorrowingDetails() {
                String employerId = employer_id.getText();

                // Check if the teacher has already borrowed two books
                if (isTeacherAtBorrowingLimit(employerId)) {
                    JOptionPane.showMessageDialog(this, "You have reached the maximum borrowing limit (5 books).", "Borrowing Limit Exceeded", JOptionPane.WARNING_MESSAGE);
                    return; // Stop the borrowing process if the limit is reached
                }
                
                // Check if any of the required fields are blank
                if (employerId.isEmpty() || teacher_name.getText().isEmpty() 
                        || teacher_contact.getText().isEmpty() || book_id.getText().isEmpty()
                        || book_title.getText().isEmpty() || book_isbn.getText().isEmpty()
                        || book_category.getSelectedItem().toString().equals("Select Category")
                        || date_borrowed.getDate() == null) {
                    JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Stop further execution
                }

                String teacherName = teacher_name.getText();              
                String department = department_combo.getSelectedItem().toString();
                String contactNo = teacher_contact.getText();
                int bookId = Integer.parseInt(book_id.getText());
                String bookTitle = book_title.getText();
                String bookIsbn = book_isbn.getText();
                String bookCategory = book_category.getSelectedItem().toString();
                Date borrowedDate = date_borrowed.getDate();

                

                String url = "jdbc:mysql://localhost:3306/librarydb";
                String user = "root";
                String password = "";

                    String sql = "INSERT INTO teacher_borrowing (teachers_name, employers_id, department, contact_no, book_id, book_title, book_isbn, book_category, date_borrowed) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

                try (Connection connection = DriverManager.getConnection(url, user, password);
                PreparedStatement pstmt = connection.prepareStatement(sql)) {

               // Retrieve the book status and category
               String status = bookDAO.getBookStatus(bookId);
               String category = bookDAO.getBookCategory(bookId);

               if (category.equals("Academic")) {
                   // Academic books cannot be borrowed
                   JOptionPane.showMessageDialog(this, "Academic books are only allowed inside the library.", "Borrowing Restricted", JOptionPane.WARNING_MESSAGE);
               } else if (status.equals("Available")) {
                   // Proceed with borrowing
                   pstmt.setString(1, teacherName);
                   pstmt.setString(2, employerId);
                   pstmt.setString(3, department);
                   pstmt.setString(4, contactNo);
                   pstmt.setInt(5, bookId);
                   pstmt.setString(6, bookTitle);
                   pstmt.setString(7, bookIsbn);
                   pstmt.setString(8, bookCategory);
                   pstmt.setDate(9, new java.sql.Date(borrowedDate.getTime()));

                   pstmt.executeUpdate();
                   JOptionPane.showMessageDialog(this, "Borrowing details submitted successfully!");

                   // Set status based on borrowing date
                   Date today = new Date();
                   boolean sameDay = borrowedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
                                      .equals(today.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                   String newStatus = sameDay ? "Borrowed" : "Reserved";

                   // Update book status
                   bookDAO.updateBookStatus(bookId, newStatus);
               } else {
                   // Book is not available for borrowing
                   JOptionPane.showMessageDialog(this, "This book is not available for borrowing.", "Book Unavailable", JOptionPane.WARNING_MESSAGE);
               }

           } catch (SQLException e) {
               JOptionPane.showMessageDialog(this, "Error submitting borrowing details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
           }
        }

            private boolean isTeacherAtBorrowingLimit(String employerId) {
                // Query the database to check how many books the teacher has borrowed
                String query = "SELECT COUNT(*) FROM teacher_borrowing WHERE employers_id = ?";
                try (Connection connection = DriverManager.getConnection(url, user, password);
                     PreparedStatement pstmt = connection.prepareStatement(query)) {
                    pstmt.setString(1, employerId);
                    try (ResultSet rs = pstmt.executeQuery()) {
                        if (rs.next()) {
                            int borrowedBooks = rs.getInt(1);
                            return borrowedBooks >= 5; // Returns true if the teacher has borrowed two or more books
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace(); // Handle the exception appropriately
                }
                return false; // Return false by default if an error occurs
            }
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> book_category;
    private javax.swing.JTextField book_id;
    private javax.swing.JTextField book_isbn;
    private javax.swing.JTextField book_title;
    private javax.swing.JLabel cancel_btn;
    private javax.swing.JLabel confirm_btn;
    private com.toedter.calendar.JDateChooser date_borrowed;
    private javax.swing.JComboBox<String> department_combo;
    private javax.swing.JTextField employer_id;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel print_due;
    private javax.swing.JTextField teacher_contact;
    private javax.swing.JTextField teacher_name;
    // End of variables declaration//GEN-END:variables
}
