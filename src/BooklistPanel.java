import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

  

public class BooklistPanel extends javax.swing.JPanel {

    /**
     * Creates new form BooklistPanel
     */
    public BooklistPanel() {
        initComponents();
        
        //make the add panel visible
       
        
        
        /// Add options to the existing JComboBox
        jComboBox1.addItem("All");
        jComboBox1.addItem("Fiction");
        jComboBox1.addItem("Non-Fiction");
        jComboBox1.addItem("Academic");
        
        // Load books initially
        loadBooks("All");
        
        // Add action listener to handle sorting when an option is selected
        jComboBox1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        
        
        //make the addbookpanel visible to the jpanel2 
        // Create and add the AddBookPanel to jPanel2
        AddBookPanel addBookPanel = new AddBookPanel();
        jPanel2.add(addBookPanel);
                    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        close = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        Scrollpane = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        refresh_btn = new javax.swing.JButton();
        remove_btn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1290, 463));
        setPreferredSize(new java.awt.Dimension(1290, 463));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/close.png"))); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });
        add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 10, 50, 40));

        jPanel1.setBackground(new java.awt.Color(255, 153, 0));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/booklist-icon.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Book List");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(499, 499, 499)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(547, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 60));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("sort");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 30, -1));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "ISBN", "Category", "Author", "Copyright", "Publisher", "Status"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        Scrollpane.setViewportView(jTable1);

        add(Scrollpane, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 940, 300));

        refresh_btn.setText("refresh");
        refresh_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_btnActionPerformed(evt);
            }
        });
        add(refresh_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 430, -1, -1));

        remove_btn.setText("remove book");
        remove_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_btnActionPerformed(evt);
            }
        });
        add(remove_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 430, 110, -1));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setLayout(new java.awt.BorderLayout());
        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 330, 300));
        add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 240, -1));

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 80, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
        String selectedCategory = jComboBox1.getSelectedItem().toString();
        loadBooks(selectedCategory);
        

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    }//GEN-LAST:event_jTable1MouseClicked

    private void refresh_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_btnActionPerformed
        // TODO add your handling code here:
        
        fetchBooks();

        
    }//GEN-LAST:event_refresh_btnActionPerformed

    private void remove_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_btnActionPerformed
        // TODO add your handling code here:
            
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        // Get the ID of the selected book
        int bookId = (int) jTable1.getValueAt(selectedRow, 0);
        // Call the method to remove the book from the database
        removeBook(bookId);
        // Refresh the table to reflect the changes
        fetchBooks();
    } else {
        JOptionPane.showMessageDialog(this, "Please select a book to remove.");
    }
    

    }//GEN-LAST:event_remove_btnActionPerformed

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        // TODO add your handling code here:

        setVisible(false);

        // Hide the booklist_content JPanel
        JPanel parent = (JPanel) this.getParent();
        parent.setVisible(false);
    }//GEN-LAST:event_closeMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String query = searchField.getText();
        searchBooks(query);
    }//GEN-LAST:event_jButton1ActionPerformed

    
        //method 
    
    
        //search method
                private void searchBooks(String query) {
                // Database connection parameters
                String url = "jdbc:mysql://localhost:3306/librarydb";
                String user = "root";
                String password = "";

                String sql = "SELECT title, isbn, category, author, copyright, publisher, status FROM books WHERE title LIKE ? OR author LIKE ? OR isbn LIKE ? OR category LIKE ? OR copyright LIKE ? OR publisher LIKE ?";


                try (Connection connection = DriverManager.getConnection(url, user, password);
                     PreparedStatement pstmt = connection.prepareStatement(sql)) {

                    pstmt.setString(1, "%" + query + "%");
                    pstmt.setString(2, "%" + query + "%");
                    pstmt.setString(3, "%" + query + "%");
                    pstmt.setString(4, "%" + query + "%");
                    pstmt.setString(5, "%" + query + "%");
                    pstmt.setString(6, "%" + query + "%");


                    ResultSet rs = pstmt.executeQuery();

                    // Get metadata to dynamically set column names
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int columnCount = rsmd.getColumnCount();
                    Vector<String> columnNames = new Vector<>();
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames.add(rsmd.getColumnName(i));
                    }

                    // Populate data vector
                    Vector<Vector<Object>> data = new Vector<>();
                    while (rs.next()) {
                        Vector<Object> vector = new Vector<>();
                        for (int i = 1; i <= columnCount; i++) {
                            vector.add(rs.getObject(i));
                        }
                        data.add(vector);
                    }

                    // Set the model for the result table
                    jTable1.setModel(new DefaultTableModel(data, columnNames));

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error searching books: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

    
        private void loadBooks(String category) {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);  // Clear existing rows
        
        BookDAO bookDAO = new BookDAO();
        List<Book> books = bookDAO.getAllBooks();

        for (Book book : books) {
            if ("All".equals(category) || book.getCategory().equals(category)) {
                tableModel.addRow(new Object[]{
                    book.getId(), book.getTitle(), book.getIsbn(), book.getCategory(),
                    book.getAuthor(), book.getCopyright(), book.getPublisher(), book.getStatus()
                });
            }
        }
        }
        
        //method for removing books
        private void fetchBooks() {
        String selectedCategory = jComboBox1.getSelectedItem().toString();
        String query = "SELECT * FROM books";
        if (!"All".equals(selectedCategory)) {
            query += " WHERE category = ?";
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            if (!"All".equals(selectedCategory)) {
                pstmt.setString(1, selectedCategory);
            }

            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id"),
                    rs.getString("title"),
                    rs.getString("isbn"),
                    rs.getString("category"),
                    rs.getString("author"),
                    rs.getString("copyright"),
                    rs.getString("publisher"),
                    rs.getString("status")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void removeBook(int bookId) {
        String url = "jdbc:mysql://localhost:3306/librarydb";
        String user = "root";
        String password = "";

        String deleteQuery = "DELETE FROM books WHERE id = ?";

        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = conn.prepareStatement(deleteQuery)) {
            pstmt.setInt(1, bookId);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Book removed successfully.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error removing book: " + e.getMessage());
            e.printStackTrace();
        }
    }

        
        
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Scrollpane;
    private javax.swing.JLabel close;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton refresh_btn;
    private javax.swing.JButton remove_btn;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
