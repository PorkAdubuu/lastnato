import static com.itextpdf.text.pdf.PdfFileSpecification.url;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.List;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


  

public class BooklistPanel extends javax.swing.JPanel {

    private String url = "jdbc:mysql://localhost:3306/librarydb";
    private String user = "root";
    private String password = "";
    
    public BooklistPanel() {
        initComponents();
             
       
       
        
        
        /// Add options to the existing JComboBox
        jComboBox1.addItem("All");
        jComboBox1.addItem("Fiction");
        jComboBox1.addItem("Non-Fiction");
        jComboBox1.addItem("Academic");
        
        // Load books initially
        loadBooks("All");
        
        // Add action listener to handle sorting when an option is selected
        jComboBox1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        
        
        //make the addbookpanel visible to the jpanel2 
        // Create and add the AddBookPanel to jPanel2
        AddBookPanel addBookPanel = new AddBookPanel();
        jPanel2.add(addBookPanel);
                    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        close = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        Scrollpane = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        remove_btn = new javax.swing.JLabel();
        export_btn = new javax.swing.JLabel();
        refresh_btn = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1290, 463));
        setPreferredSize(new java.awt.Dimension(1290, 463));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/close.png"))); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeMouseExited(evt);
            }
        });
        add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 10, 50, 40));

        jPanel1.setBackground(new java.awt.Color(70, 134, 242));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/booklist-icon.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Book List");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(487, 487, 487)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(559, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 60));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("sort");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 30, -1));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "ISBN", "Category", "Author", "Copyright", "Publisher", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        Scrollpane.setViewportView(jTable1);

        add(Scrollpane, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 940, 300));

        jPanel2.setBackground(new java.awt.Color(133, 177, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.BorderLayout());
        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 330, 300));
        add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 240, -1));

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 80, -1));

        remove_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/remove-btnn.png"))); // NOI18N
        remove_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remove_btnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                remove_btnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                remove_btnMouseExited(evt);
            }
        });
        add(remove_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 430, -1, -1));

        export_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/export-icon.png"))); // NOI18N
        export_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                export_btnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                export_btnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                export_btnMouseExited(evt);
            }
        });
        add(export_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 70, -1, -1));

        refresh_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastnato/refresh-greeny.png"))); // NOI18N
        refresh_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refresh_btnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refresh_btnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refresh_btnMouseExited(evt);
            }
        });
        add(refresh_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 430, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
        String selectedCategory = jComboBox1.getSelectedItem().toString();
        loadBooks(selectedCategory);
        

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            Object value = jTable1.getValueAt(selectedRow, 0);
            String bookId = null;
            if (value instanceof Integer) {
                bookId = String.valueOf(value);
            } else if (value instanceof String) {
                bookId = (String) value;
            }
            // Check if the book status is available
            String status = jTable1.getValueAt(selectedRow, 7).toString(); // Assuming status is at index 7
            if (!"Available".equals(status)) {
                // If status is not available, show borrower details
                showBorrowerDetails(bookId);
            } else {
                // If status is available, copy book ID to clipboard
                copyToClipboard(Integer.parseInt(bookId));
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        // TODO add your handling code here:

        setVisible(false);

        // Hide the booklist_content JPanel
        JPanel parent = (JPanel) this.getParent();
        parent.setVisible(false);
    }//GEN-LAST:event_closeMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String query = searchField.getText();
        searchBooks(query);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void remove_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_btnMouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
            if (selectedRow != -1) {
                // Get the ID of the selected book
                int bookId = (int) jTable1.getValueAt(selectedRow, 0);
                // Call the method to remove the book from the database
                removeBook(bookId);
                // Refresh the table to reflect the changes
                fetchBooks();
            } else {
                JOptionPane.showMessageDialog(this, "Please select a book to remove.");
            }
    }//GEN-LAST:event_remove_btnMouseClicked

    private void remove_btnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_btnMouseEntered
        // TODO add your handling code here:
        remove_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_remove_btnMouseEntered

    private void remove_btnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_btnMouseExited
        // TODO add your handling code here:
        remove_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_remove_btnMouseExited

    private void export_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_export_btnMouseClicked
        // TODO add your handling code here:
        exportToExcel();       
    }//GEN-LAST:event_export_btnMouseClicked

    private void export_btnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_export_btnMouseEntered
        // TODO add your handling code here:
        export_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_export_btnMouseEntered

    private void export_btnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_export_btnMouseExited
        // TODO add your handling code here:
        export_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_export_btnMouseExited

    private void refresh_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_btnMouseClicked
        // TODO add your handling code here:
        fetchBooks();
    }//GEN-LAST:event_refresh_btnMouseClicked

    private void refresh_btnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_btnMouseEntered
        // TODO add your handling code here:
        refresh_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_refresh_btnMouseEntered

    private void refresh_btnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_btnMouseExited
        // TODO add your handling code here:
        refresh_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_refresh_btnMouseExited

    private void closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseEntered
        // TODO add your handling code here:
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_closeMouseEntered

    private void closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseExited
        // TODO add your handling code here:
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_closeMouseExited

    
        //method 
        
    
    
    private void showBorrowerDetails(String bookId) {
        BorrowerDetailsDialog detailsDialog = new BorrowerDetailsDialog(bookId);
        detailsDialog.setVisible(true);
    }
    
    
    private void copyToClipboard(int id) {
    StringSelection stringSelection = new StringSelection(String.valueOf(id));
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    clipboard.setContents(stringSelection, null);
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        private void exportToExcel() {
        String url = "jdbc:mysql://localhost:3306/librarydb";
        String user = "root";
        String password = "";

        try (Connection connection = DriverManager.getConnection(url, user, password);
             PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM books");
             ResultSet resultSet = preparedStatement.executeQuery()) {

            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet sheet = workbook.createSheet("Book List");

            // Create a bold font
            org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
            headerFont.setBold(true);

            // Create a cell style with the bold font
            CellStyle headerCellStyle = workbook.createCellStyle();
            headerCellStyle.setFont(headerFont);
            
            // Create a bold font for date and time
            XSSFFont dateTimeFont = workbook.createFont();
            dateTimeFont.setBold(true);

            // Create a cell style for date and time with the bold font
            CellStyle dateTimeCellStyle = workbook.createCellStyle();
            dateTimeCellStyle.setFont(dateTimeFont);

            // Get the current date and time
            LocalDateTime currentDateTime = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = currentDateTime.format(formatter);

            // Create a row for the export date and time
            Row dateTimeRow = sheet.createRow(0);
            Cell dateTimeCell = dateTimeRow.createCell(0);
            dateTimeCell.setCellValue("Export Date and Time: " + formattedDateTime);
            dateTimeCell.setCellStyle(dateTimeCellStyle);

            // Create the header row
            Row headerRow = sheet.createRow(2); // Move header row to the third row
            Cell cell;

            cell = headerRow.createCell(0);
            cell.setCellValue("ID");
            cell.setCellStyle(headerCellStyle);

            cell = headerRow.createCell(1);
            cell.setCellValue("Title");
            cell.setCellStyle(headerCellStyle);

            cell = headerRow.createCell(2);
            cell.setCellValue("ISBN");
            cell.setCellStyle(headerCellStyle);

            cell = headerRow.createCell(3);
            cell.setCellValue("Category");
            cell.setCellStyle(headerCellStyle);

            cell = headerRow.createCell(4);
            cell.setCellValue("Author");
            cell.setCellStyle(headerCellStyle);

            cell = headerRow.createCell(5);
            cell.setCellValue("Copyright");
            cell.setCellStyle(headerCellStyle);

            cell = headerRow.createCell(6);
            cell.setCellValue("Publisher");
            cell.setCellStyle(headerCellStyle);

            cell = headerRow.createCell(7);
            cell.setCellValue("Status");
            cell.setCellStyle(headerCellStyle);

            // Create the data rows
            int rowNum = 4; // Start data rows after the header row
            while (resultSet.next()) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(resultSet.getInt("id"));
                row.createCell(1).setCellValue(resultSet.getString("title"));
                row.createCell(2).setCellValue(resultSet.getString("isbn"));
                row.createCell(3).setCellValue(resultSet.getString("category"));
                row.createCell(4).setCellValue(resultSet.getString("author"));
                row.createCell(5).setCellValue(resultSet.getString("copyright"));
                row.createCell(6).setCellValue(resultSet.getString("publisher"));
                row.createCell(7).setCellValue(resultSet.getString("status"));
            }

            // Write the output to a file
            try (FileOutputStream fileOut = new FileOutputStream("book_list.xlsx")) {
                workbook.write(fileOut);
            }

            // Display a success message
            JOptionPane.showMessageDialog(null, "Book list exported to Excel successfully!");

        } catch (SQLException | IOException e) {
            e.printStackTrace();
            // Display an error message if export fails
            JOptionPane.showMessageDialog(null, "Error exporting Book list to Excel: " + e.getMessage());
        }
    }

    
        //search method
        private void searchBooks(String query) {
                // Database connection parameters
                String url = "jdbc:mysql://localhost:3306/librarydb";
                String user = "root";
                String password = "";

                // Modified SQL query to include the book ID
                String sql = "SELECT id, title, isbn, category, author, copyright, publisher, status FROM books " +
                             "WHERE title LIKE ? OR author LIKE ? OR isbn LIKE ? OR category LIKE ? " +
                             "OR copyright LIKE ? OR publisher LIKE ?";

                try (Connection connection = DriverManager.getConnection(url, user, password);
                     PreparedStatement pstmt = connection.prepareStatement(sql)) {

                    // Set parameters for the prepared statement
                    for (int i = 1; i <= 6; i++) {
                        pstmt.setString(i, "%" + query + "%");
                    }

                    // Execute the query
                    ResultSet rs = pstmt.executeQuery();

                    // Get metadata to dynamically set column names
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int columnCount = rsmd.getColumnCount();
                    Vector<String> columnNames = new Vector<>();
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames.add(rsmd.getColumnName(i));
                    }

                    // Populate data vector
                    Vector<Vector<Object>> data = new Vector<>();
                    while (rs.next()) {
                        Vector<Object> vector = new Vector<>();
                        for (int i = 1; i <= columnCount; i++) {
                            vector.add(rs.getObject(i));
                        }
                        data.add(vector);
                    }

                    // Set the model for the result table
                    jTable1.setModel(new DefaultTableModel(data, columnNames));

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error searching books: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }


    
        private void loadBooks(String category) {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);  // Clear existing rows
        
        BookDAO bookDAO = new BookDAO();
        List<Book> books = bookDAO.getAllBooks();

        for (Book book : books) {
            if ("All".equals(category) || book.getCategory().equals(category)) {
                tableModel.addRow(new Object[]{
                    book.getId(), book.getTitle(), book.getIsbn(), book.getCategory(),
                    book.getAuthor(), book.getCopyright(), book.getPublisher(), book.getStatus()
                });
            }
        }
        }
        
        //method for removing books
        private void fetchBooks() {
        String selectedCategory = jComboBox1.getSelectedItem().toString();
        String query = "SELECT * FROM books";
        if (!"All".equals(selectedCategory)) {
            query += " WHERE category = ?";
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            if (!"All".equals(selectedCategory)) {
                pstmt.setString(1, selectedCategory);
            }

            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id"),
                    rs.getString("title"),
                    rs.getString("isbn"),
                    rs.getString("category"),
                    rs.getString("author"),
                    rs.getString("copyright"),
                    rs.getString("publisher"),
                    rs.getString("status")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

            private void removeBook(int bookId) {
            String url = "jdbc:mysql://localhost:3306/librarydb";
            String user = "root";
            String password = "";

            String deleteQuery = "DELETE FROM books WHERE id = ?";

            try (Connection conn = DriverManager.getConnection(url, user, password);
                 PreparedStatement pstmt = conn.prepareStatement(deleteQuery)) {
                pstmt.setInt(1, bookId);
                int rowsAffected = pstmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Book removed successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to delete the book because it is currently borrowed by someone.", "Error Removing Book", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Unable to delete the book because it is currently borrowed by someone.", "Error Removing Book", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace(); // Print the stack trace for debugging purposes
            }
        }

        public void searchBooksFromDashboard(String query) {
        // Database connection parameters
        String url = "jdbc:mysql://localhost:3306/librarydb";
        String user = "root";
        String password = "";

        // SQL query to search for books based on title, author, ISBN, ID, or category
        String sql = "SELECT * FROM books WHERE title LIKE ? OR author LIKE ? OR isbn LIKE ? OR copyright LIKE ? OR id LIKE ? OR category LIKE ? OR publisher LIKE ?";

        try (Connection connection = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = connection.prepareStatement(sql)) {

            // Set the search query as a parameter in the prepared statement
            for (int i = 1; i <= 7; i++) {
                pstmt.setString(i, "%" + query + "%");
            }

            // Execute the query
            ResultSet rs = pstmt.executeQuery();

            // Populate the table with the search results
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Clear existing rows
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("title"),
                    rs.getString("isbn"),
                    rs.getString("category"),
                    rs.getString("author"),
                    rs.getString("copyright"),                  
                    rs.getString("publisher"),
                    rs.getString("status")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error searching books: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

        
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Scrollpane;
    private javax.swing.JLabel close;
    private javax.swing.JLabel export_btn;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel refresh_btn;
    private javax.swing.JLabel remove_btn;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
